% KaliVeda User's Guide

# Detector signals and calibrations #

Each detector has an associated list of signals which may be DAQ parameters,
the result of some calibration procedure, or derived from a mathematical
combination of existing parameters:

~~~~~~~~~~{.cpp}
kaliveda [0] gMultiDetArray->GetDetector("SI_0801")->GetListOfDetectorSignals().ls()

OBJ: KVUniqueNameList	KVSeqCollection_6210	Optimised list in which objects with the same name can only be placed once : 0
 OBJ: KVACQParamSignal	PG	Signal PG of detector SI_0801 : 0 at: 0x55b8862a41f0
 OBJ: KVCalibratedSignal	Volt	Signal Volt calculated from signal PG of detector SI_0801 : 0 at: 0x55b88de4e540
 OBJ: KVCalibratedSignal	Energy	Signal Energy calculated from signal Volt of detector SI_0801 : 0 at: 0x55b88df48370

kaliveda [1] gMultiDetArray->GetDetector("CSI-1111")->GetListOfDetectorSignals().ls()

OBJ: KVUniqueNameList	KVSeqCollection_28018	Optimised list in which objects with the same name can only be placed once : 0
 OBJ: KVFAZIADetectorSignal	Q3FPGAEnergy	Signal Q3FPGAEnergy of detector CSI-1111 : 0 at: 0x55fb35997490
 OBJ: KVFAZIADetectorSignal	Q3FastFPGAEnergy	Signal Q3FastFPGAEnergy of detector CSI-1111 : 0 at: 0x55fb35997640
 OBJ: KVDetectorSignalExpression	ID_CSI-1111-VARX	Signal calculated as Q3FastFPGAEnergy/Q3FPGAEnergy for detector CSI-1111 : 0 at: 0x55fb3c042070
~~~~~~~~~~

The value of any signal can be retrieved using its name:

~~~~~~~~~~{.cpp}
kaliveda [2] gMultiDetArray->GetDetector("SI_0801")->GetDetectorSignalValue("PG")

(double) 234.
~~~~~~~~~~

If the signal in question is not defined, this method returns 0. You can test if
a given signal is defined for a detector using:

~~~~~~~~~~{.cpp}
kaliveda [3] gMultiDetArray->GetDetector("SI1-111")->HasDetectorSignalValue("Q3FPGAEnergy")

(bool) false
~~~~~~~~~~

For more information on these methods, see the [KVDetector] class reference.

<a id="KVDetectorSignal_family"></a>
The base class which handles detector signals is [KVDetectorSignal]. As shown below, there is a family of related
classes which have very similar behaviour which handle specific types of signals:

![](http://indra.in2p3.fr/kaliveda/doc/master/classKVDetectorSignal__inherit__graph.png)


## Signal expressions ##

New signals can be defined and added to detectors using any mathematical expression
involving known signals. For example, in order to define the `ID_CSI-1111-VARX`
signal shown in the previous example above, you would go about it this way:

~~~~~~~~~~{.cpp}
kaliveda [4] gMultiDetArray->GetDetector("CSI-1111")->AddDetectorSignalExpression("ID_CSI-1111-VARX","Q3FastFPGAEnergy/Q3FPGAEnergy");

(bool) true
~~~~~~~~~~

Note that such signal expressions may be added automatically when an identification
telescope is initialised with an identification grid which uses such an
expression as either its `VARX` or `VARY` coordinate
(see [Particle identification]).

The method [KVDetector::AddDetectorSignalExpression] returns `false` if there is a
problem with the expression (no known signals). In this case no new signal is added to the detector.

Detector signal expressions are handled by the [KVDetectorSignalExpression] class.

## Detector calibration ##

Calibrated signals (handled by the [KVCalibratedSignal] class) are added to detectors when a calibration
is available for a given run of a dataset (experiment). In order to add calibrations to a dataset,
it needs to have a file `[array_name].CalibrationFiles.dat` which contains the names of files containing
different calibrations for different detectors and different runs.

Each of these files should have the same basic structure:

~~~~~~~~~~
# Any useful comments on a line starting with '#'
# Remember that comments are always useful
# You will remember nothing about this calibration in 3 months' time...
SignalIn:                                PG
SignalOut:                               Volt
CalibType:                               Channel-Volt PG
CalibClass:                              FunctionCal
CalibOptions:                            func=pol3,min=0,max=1,inverse=true
SI_0801:                                 71.9228,3979.44,32.1727,-27.9312
SI_0802:                                 70.9138,3978.88,31.5155,-27.9611
[etc. etc.]
~~~~~~~~~~

A calibration basically defines how a new calibrated signal is generated from an existing input signal
using a class derived from [KVCalibrator]:

~~~~~~~~~~~~

   KVDetectorSignal  _______\   KVCalibrator  _______\  KVCalibratedSignal
       'input'              /                        /       'output'
       
~~~~~~~~~~~~

The 'input signal' can of course itself be the result of a calibration procedure, i.e. it can be a
[KVCalibratedSignal], or indeed any other signal derived from [KVDetectorSignal]
(see diagram [above](#KVDetectorSignal_family)).

The file must define _at least_ the input and output signals using their names (`SignalIn` and `SignalOut`
parameters above) and the [KVCalibrator]-derived class to be used in order to perform the calibration
(parameter `CalibClass` above), i.e. one of the classes which appear in the following diagram:

![](http://indra.in2p3.fr/kaliveda/doc/master/classKVCalibrator__inherit__graph.png)

The value of the `CalibClass` parameter is not, however, the name of a class: it is a name of one of the
plugins defined in order to extend the [KVCalibrator] base class. In order to know which plugin name corresponds
to which class, you can use the following two methods:

~~~~~~~~~~{.cpp}
kaliveda [0] KVBase::GetListOfPlugins("KVCalibrator")

(const Char_t *) "KVLinCal KVLightEnergyCsI KVLightEnergyCsIFull KVPulseHeightDefect KVRecombination KVChannelVolt KVChannelEnergyAlpha KVFunctionCal KVVoltEnergy KVFAZIACalibrator"

kaliveda [1] KVBase::GetListOfPluginURIs("KVCalibrator")

(const Char_t *) "LinCal LightEnergyCsI LightEnergyCsIFull PulseHeightDefect Recombination ChannelVolt ChannelEnergyAlpha FunctionCal VoltEnergy FAZIA"
~~~~~~~~~~

The order of the class/plugin names in the two lists is the same. In general, the plugin name is just the class name minus the `KV` prefix.

The `CalibOptions` parameter may be used if required to supply any additional information needed to set up the
calibrator object as you wish. If and how to use this parameter depends on which class you are using: look at
the class reference guide to see if the
class has a specialised version of the [KVCalibrator::SetOptions] method
(see for example the [KVFunctionCal::SetOptions] method for the calibrator used in the example above). 

Once defined, the calibrated signal values are obtained in the same way as any other,
using the `KVDetector::GetDetectorSignalValue` method:

~~~~~~~~~~{.cpp}
kaliveda [2] gMultiDetArray->GetDetector("SI_0801")->GetDetectorSignalValue("Volt")

(double) 0.040703783

kaliveda [3] gMultiDetArray->GetDetector("SI_0801")->GetDetectorSignalValue("Energy")

(double) 9.7544453
~~~~~~~~~~

### When is a detector considered 'calibrated' ? ###
By default a detector is considered to be calibrated _i.e._ the
method [KVDetector::IsCalibrated] returns `true` if it has a signal defined called `Energy`.
However this behaviour may be modified in specific daughter classes.

### Inverse calibration ###

Given the situation in the previous examples i.e. where a detector called `SI_0801`
has one or more calibrations available, it is possible to "backtrack" from one
or other final output values and calculate what would be the input, _i.e._ the
calibration can be inverted, either partially or entirely:

~~~~~~~~~~{.cpp}
kaliveda [4] gMultiDetArray->GetDetector("SI_0801")->GetInverseDetectorSignalValue("Energy", 9.7544453, "Volt")

(double) 0.040735500

kaliveda [5] gMultiDetArray->GetDetector("SI_0801")->GetInverseDetectorSignalValue("Energy", 9.7544453, "PG")

(double) 234.07877

kaliveda [6] gMultiDetArray->GetDetector("SI_0801")->GetInverseDetectorSignalValue("Volt", 0.040735, "PG")

(double) 234.07678
~~~~~~~~~~

*N.B.* The small differences between input and output values here are due to the
fact that the input signal `PG` is a [KVACQParamSignal] for which the `GetValue()`
method returns a randomized value in the interval [-0.5,+0.5] around the actual
integer value of the acquisition parameter.

[KVFunctionCal]: http://indra.in2p3.fr/kaliveda/doc/master/classKVFunctionCal.html
[KVDetectorSignal]: http://indra.in2p3.fr/kaliveda/doc/master/classKVDetectorSignal.html
[KVACQParamSignal]: http://indra.in2p3.fr/kaliveda/doc/master/classKVACQParamSignal.html
[KVCalibratedSignal]: http://indra.in2p3.fr/kaliveda/doc/master/classKVCalibratedSignal.html
[KVDetectorSignalExpression]: http://indra.in2p3.fr/kaliveda/doc/master/classKVDetectorSignalExpression.html
[KVDetector]: http://indra.in2p3.fr/kaliveda/doc/master/classKVDetector.html
[KVDetector::AddDetectorSignalExpression]: http://indra.in2p3.fr/kaliveda/doc/master/classKVDetector.html#a3883ef6f4531f5e701b2d5ebb356ce23
[KVCalibrator]: http://indra.in2p3.fr/kaliveda/doc/master/classKVCalibrator.html
[Particle identification]: identification.html
[KVCalibrator::SetOptions]: http://indra.in2p3.fr/kaliveda/doc/master/classKVCalibrator.html#a6f15ce751ceee980fcf15f5a51fd73e3
[KVFunctionCal::SetOptions]: http://indra.in2p3.fr/kaliveda/doc/master/classKVFunctionCal.html#a64841324c9df264765acc8a56a85b3ed
[KVDetector::IsCalibrated]: http://indra.in2p3.fr/kaliveda/doc/master/classKVDetector.html#a738b6b9c9c7949c9e806abfc676b730a
